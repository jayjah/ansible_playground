add_header X-Frame-Options SAMEORIGIN;
add_header X-Content-Type-Options nosniff;
add_header X-XSS-Protection "1; mode=block";
add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.google-analytics.com; img-src 'self' data: https://www.google-analytics.com; style-src 'self' 'unsafe-inline'; font-src 'self'; frame-src 'none'; object-src 'none'";

# Load Balancing here with least_conn balancing algorithm
upstream backendservers {
    least_conn;
    server {{ backend_ip_address }};
}

# HTTPS server
#
server {
    listen 443 ssl default deferred;
    server_name {{ domains_without_prefix.stdout }};

    # first item is the right one to look for the saved key from letsencrypt
    # this is default behaviour of letsencrypt when multiple domains specified
    # in our case its always a list with at least one entry. so just take item at pos 0
    # ssl on; - deprecated(!)
    # ssl on;
    ssl_certificate         /etc/letsencrypt/live/{{ domain_names[0] }}/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/{{ domain_names[0] }}/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/{{ domain_names[0] }}/fullchain.pem;

    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 5m;
    ssl_stapling on;
    ssl_stapling_verify on;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";

    ssl_dhparam /etc/nginx/dhparams.pem;
    ssl_prefer_server_ciphers on;

    root /var/www/{{ domain_names[0] }};
    index index.html index.htm;

    underscores_in_headers on;

    location /grafana {

        proxy_pass http://{{ metrics_grafana_network_ip }};
    }

    location / {

            if ($request_method = 'OPTIONS') {
               add_header 'Access-Control-Allow-Origin' '*';
               add_header 'Access-Control-Allow_Credentials' 'true';
               add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,boundary,filePath,Content-Type,Content-Range,Range,config_x_auth_token,config-x-auth-token,pageById,pageByDate,splitBy,onlyIds,pageByIds,name,extraContent,type,value,property,channel,token,delete,clientmessagekey,charset';
               add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE';

              add_header 'Access-Control-Max-Age' 1728000;
              add_header 'Content-Type' 'text/plain charset=UTF-8';
              add_header 'Content-Length' 0;
              return 204;
            }

            proxy_http_version     1.1;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Host $server_name;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Upgrade $http_upgrade;
    		proxy_set_header X-Forwarded_Proto $scheme;
    		proxy_redirect off;
    		proxy_pass_request_headers on;

    		add_header  'Access-Control-Expose-Headers'  '*' always;

    		proxy_pass http://backendservers;
    }
}