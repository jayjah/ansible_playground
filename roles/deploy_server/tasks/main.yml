---
#- name: Create server directory
#  file:
#    path: "/home/{{ username }}/dart_server"
#    state: directory
#    owner: "{{ username }}"
#    group: "{{ username }}"
#    mode: "0755"

- name: Copy server archive to remote host and decompress it afterwards
  unarchive:
    src: /root/server.tar.gz
    dest: "/home/{{ username }}"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"
    remote_src: false

- name: Remove compressed archive
  file:
    path: "/home/{{ username }}/server.tar.gz"
    state: absent
  become: true

- name: Create server config yaml file
  template:
    src: templates/server_deploy/config.yaml.j2
    dest: "/home/{{ username }}/dart_backend/config.yaml"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: 0700

#- name: Create server keys_config yaml file
#  template:
#    src: templates/server_deploy/keys_config.yaml.j2
#    dest: "/home/{{ username }}/dart_backend/keys_config.yaml"
#    owner: "{{ username }}"
#    group: "{{ username }}"
#    mode: 0700
- name: Remove old docker container
  docker_container:
    name: "{{ server_container_name }}"
    state: absent

- name: Remove old docker image
  docker_image:
    name: "{{ server_container_name }}"
    state: absent

- name: Build server docker image (jayjah/server-dart)
  docker_image:
    name: "{{ server_container_name }}"
    build:
      path: "/home/{{ username }}/dart_backend"
      dockerfile: docker/Dockerfile
      pull: yes
      args:
        ISOLATES: "{{ server_isolates }}"
        PORTS: "{{ server_port }}"
    source: build

#- name: Build server docker container (jayjah/server-dart)
#  shell:
#    chdir: "/home/{{ username }}/dart_backend"
#    cmd: "dart pub get && dart bin/cli.dart docker build --vm"
#  args:
#    executable: /bin/bash
#  become: false
#  become_user: "{{ username }}"

- name: Run server docker container (jayjah/server-dart)
  docker_container:
    name: server-dart
    image: "{{ server_container_name }}"
    state: started
    recreate: true
    restart: false
    restart_policy: unless-stopped
    published_ports:
      - "{{ server_port }}:{{ server_port }}"
    volumes:
      - "/home/{{ username }}/dart_server/public:/app/public"
    output_logs: yes
    log_driver: json-file
    log_options:
      max-size: 10m
      labels: server-dart
      max-file: '3'
    env:
      POSTGRES_DB: "{{ postgres_db_name }}"
